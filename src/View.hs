module View where

import Grid
import Control.Concurrent
import Data.List

{-- draws a list of points on a grid without any axis. Autogenerates dimensions
    to fit all points on the grid --}
autoDrawPoints :: [(Int,Int)] -> [[Char]]
autoDrawPoints ps = let (xs,ys) = autogenerateDimensions ps in
                    drawOn (renormalizePoints ps) (generateGrid xs ys)


{-- draws points on a given grid --}
drawOn :: [(Int,Int)] -> [[Char]] -> [[Char]]
drawOn [] grd = grd
drawOn (p:ps) grd = drawOn ps $ drawPoint p grd


{-- draws a point in a grid. Does not draw point if outside grid --}
drawPoint :: (Int,Int) -> [[Char]] -> [[Char]] 
drawPoint (x,y) grd = replace y (replace x 'o' $ grd!!y) grd


{-- replace position newElement list returns a list where element at given
    position is replaced with new element --}
replace :: Int -> a -> [a] -> [a]
replace pos newElem list 
  | pos >= length list || pos < 0 = list
  | otherwise = let (left, right) = splitAt pos list in 
                left ++ [newElem] ++ (tail right)


 {-- genrates a grid with given with and height filed with ' ' chars --}
generateGrid :: Int -> Int -> [[Char]] 
generateGrid 0 _ = []
generateGrid w h = [[' ' | _ <- [1..w]] | _ <- [1..h]]


{-- generatesDims generates dimensions of the minimum grid with the points from
    a list --}
autogenerateDimensions :: [(Int,Int)] -> (Int,Int)
autogenerateDimensions points = let xs = map (\p -> fst p) points
                                    ys = map (\p -> snd p) points in
                                (maximum xs - minimum xs + 1,maximum ys - minimum ys + 1)

               
{-- renomralizes points such that there is a point on x==0 and one (maybe the
  same) on y==0. Rest ist shifted such that the relative distnaces are preseverd --}
renormalizePoints :: [(Int,Int)] -> [(Int,Int)]
renormalizePoints ps = let (xs,ys) = unzip ps in
                      map (\(x,y) -> (x- minimum xs,y - minimum ys)) ps
